
/* 
 * The MIT License
 * 
 * Copyright (c) 2008 Samuel Williams
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
 
package org.projectsnooze.dependency
{
	import org.projectsnooze.datatype.TypeUtils;
	import org.projectsnooze.execute.QueueManager;
	import org.projectsnooze.generator.StatementCreator;
	import org.projectsnooze.scheme.EntityDataMapProvider;
	
	/**
	 * 	This class is used to create instances of <code>DependencyTree</code>.
	 * 	It performs the hard work of recursing through entities, creating
	 * 	and relating the <code>DependencyNode</code>s in such a way that they
	 * 	form a dependency tree which, when executed only performs SQL when
	 * 	all necessay SQL has been performed first
	 */ 
	public interface DependencyTreeCreator
	{
		/**
		 * 	sets an instance of a <code>QueueManager</code> so that the 
		 * 	statements generated by the DependencyTree can be queued
		 * 	for execution
		 */ 
		function setQueueManager ( queueManager : QueueManager ) : void;
		
		/**
		 * 	return the <code>QueueManager</code> that has been provided
		 * 	to the instance of <code>DependencyTreeCreator</code>
		 */ 
		function getQueueManager () : QueueManager;
		
		/**
		 * 	this fuction returns a <code>DependencyTree</code> containing 
		 * 	<code>DependencyNode</code>s that when processed will generate the
		 * 	sql statements to insert the entity provided
		 *
		 * 	@param entity : Object, the object to insert into the database
		 */ 
		function getSaveDependencyTree ( entity : Object ) : DependencyTree;
		
		/**
		 * 	the instance of <code>EntityDataMapProvider</code> containing the
		 * 	<code>EntityDataMap</code>s for all in managed entities is required
		 * 	so the necessary sql can be generated for which ever entity is 
		 *  passed to one of the dependency tree creating methods
		 */ 
		function setEntityDataMapProvider ( entityDataMap : EntityDataMapProvider ) : void
		
		/**
		 * 	return the <code>EntityDataMapProvider</code> that has been 
		 * 	provided to the instance
		 */ 
		function getEntitDataMapProvider ( ) : EntityDataMapProvider
		
		/**
		 * 	an instance of <code>TypeUtils</code> is required while creating
		 * 	<code>DependencyTree</code>s, and is set with this function
		 */ 
		function setTypeUtils ( typeUtils : TypeUtils ) : void
		
		/**
		 * 	returns the provided instance of <code>TypeUtils</code>
		 */ 
		function getTypeUtils () : TypeUtils;
		
		/**
		 * 	the <code>StatementCreator</code> is used to provided each 
		 * 	<code>DependencyNode</code> within the generated
		 * 	<code>DependencyTree</code>s with their necessary SQL
		 */ 
		function setStatementCreator ( statementCreator : StatementCreator ) : void;
		
		/**
		 * 	returns the proveded instance of <code>StatementCreator</code>
		 */ 
		function getStatementCreator () : StatementCreator;
		
	}
}