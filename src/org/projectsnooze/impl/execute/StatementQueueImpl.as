
/* 
 * The MIT License
 * 
 * Copyright(  c) 2008 Samuel Williams
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files(  the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
 
package org.projectsnooze.impl.execute
{
	import org.projectsnooze.impl.patterns.QueueImpl;
	
	import flash.data.SQLConnection;
	import flash.events.SQLEvent;
	
	import org.projectsnooze.connections.ConnectionPool;
	import org.projectsnooze.execute.StatementExecutor;
	import org.projectsnooze.execute.StatementQueue;
	import org.projectsnooze.execute.StatementWrapper;
	import org.projectsnooze.impl.patterns.ArrayIterator;
	import org.projectsnooze.patterns.Iterator;

	/**
	 * The <code>StatementQueueImpl</code> is responsible for 
	 * executing the <code>Statement</code> objects generated by a 
	 * <code>Dependencytree</code>.  As well as executing the SQL
	 * required for the given action (insert/delete etc) the queue
	 * also open a connection begins a ends transactions (both only
	 * where necessary).
	 * 
	 * @author Samuel Williams
	 * @since 12.08.08
	 */	
	public class StatementQueueImpl extends QueueImpl implements StatementQueue
	{
		
		private var _connectionPool:ConnectionPool;
		private var _connection:SQLConnection;
		private var _full:Boolean;
		
		/**
		 * Creates instace of <code>StatementQueueImpl</code>
		 */ 
		public function StatementQueueImpl()
		{
			_full = false;
		}
		
		/**
		 * @inheritDoc
		 */ 
		override public function start():void
		{
			if ( !_connection )
			{
				_connection = _connectionPool.getConnection();
			}
			
			if( _connection.connected )
			{
				super.start();
			}
			else
			{
				_connection.addEventListener( SQLEvent.OPEN , onOpen );
				_connection.openAsync( _connectionPool.getFile() );
			}
		}
		
		private function onOpen( event:SQLEvent ):void
		{
			_connection.removeEventListener( SQLEvent.OPEN , onOpen );
			start();
		}
		
		/**
		*	@inheritDoc
		*/	
		public function add( wrapper:StatementWrapper ):void
		{
			var executor:StatementExecutor = new StatementExecutorImpl();
			executor.setStatementWrapper( wrapper );
			addElement( executor );
		}
		
		/**
		 * @inheritDoc
		 */ 
		override protected function processNext():void
		{
			var iterator:Iterator = new ArrayIterator( _elements );
			
			// get the first element form the list of elements
			var element:StatementExecutor = iterator.next() as StatementExecutor;
			
			// remove the element from the queue
			iterator.remove();
			
			element.setConnection( _connection );
				
			// start the element
			element.start();
		}
		
		/**
		 * @inheritDoc
		 */ 
		override protected function onFinish():void
		{
			if( _full )
			{
				super.onFinish();
			}
		}

		/**
		 * @inheritDoc
		 */ 
		public function getFull():Boolean
		{
			return _full;
		}
		
		/**
		 * @inheritDoc
		 */ 
		public function setFull( full:Boolean ):void
		{
			_full = full;
		}
		
		/**
		*	@inheritDoc
		*/	
		public function setConnectionPool( connectionPool:ConnectionPool ):void
		{
			_connectionPool = connectionPool;
		}
	}
}